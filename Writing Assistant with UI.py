{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyNavYkmF2fADYIs4f9V3txT"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","source":["# ‚úÖ Install required packages\n","!pip install -q -U langchain langchain-groq langchain-community python-dotenv gradio\n","\n","# ‚úÖ Imports\n","import os\n","from google.colab import userdata\n","import gradio as gr\n","from langchain_groq import ChatGroq\n","from langchain.agents import initialize_agent, Tool, AgentType\n","from langchain.memory import ConversationBufferMemory\n","from langchain.prompts import PromptTemplate\n","from langchain.tools import tool\n","\n","# ‚úÖ Load API key from Colab secrets\n","try:\n","    groq_api_key = userdata.get('GROQ_API_KEY')\n","except Exception as e:\n","    raise ValueError(\"‚ö†Ô∏è Failed to load Groq API Key from Colab secrets\")\n","\n","# ‚úÖ Writing Knowledge Base\n","WRITING_KNOWLEDGE = {\n","    \"hook\": \"A hook is a compelling first sentence designed to grab the reader's attention.\",\n","    \"thesis\": \"A thesis statement clearly expresses the main idea of your paper.\",\n","    \"conclusion\": \"A strong conclusion summarizes your argument and reinforces your thesis.\"\n","}\n","\n","# ‚úÖ Tool 1: Writing Knowledge Base\n","@tool\n","def writing_knowledge_base(topic: str) -> str:\n","    \"\"\"Retrieve writing-related tips or definitions from knowledge base\"\"\"\n","    topic = topic.lower().strip()\n","    if topic in WRITING_KNOWLEDGE:\n","        return WRITING_KNOWLEDGE[topic]\n","    for key in WRITING_KNOWLEDGE:\n","        if key in topic:\n","            return WRITING_KNOWLEDGE[key]\n","    return \"\"\n","\n","# ‚úÖ Tool 2: Reading Time Calculator\n","@tool\n","def estimate_reading_time(words: str) -> str:\n","    \"\"\"Calculate exact reading time from word count\"\"\"\n","    try:\n","        word_count = int(''.join(filter(str.isdigit, words)))\n","        if word_count <= 0:\n","            return \"Word count must be positive\"\n","        minutes = word_count / 200\n","        if minutes < 1:\n","            return f\"Exact reading time: {int(word_count / 200 * 60)} seconds ({word_count} words)\"\n","        elif minutes > 60:\n","            hours = int(minutes // 60)\n","            remaining_mins = int(minutes % 60)\n","            return f\"Exact reading time: {hours}h {remaining_mins}m ({word_count} words)\"\n","        else:\n","            return f\"Exact reading time: {minutes:.1f} minutes ({word_count} words)\"\n","    except:\n","        return \"Please enter like: 1200 or '1200 words'\"\n","\n","# ‚úÖ Tools initialization\n","tools = [\n","    Tool(name=\"WritingGuide\", func=writing_knowledge_base, description=\"For writing terms like hook, thesis, conclusion\"),\n","    Tool(name=\"ReadingTime\", func=estimate_reading_time, description=\"For calculating reading time from word count\")\n","]\n","\n","# ‚úÖ Prompt Template\n","writing_prompt = PromptTemplate(\n","    input_variables=[\"task\"],\n","    template=\"\"\"\n","You are a professional writing assistant. Provide short, clear, and helpful responses in this format:\n","\n","Definition (1 sentence)\n","- Bullet point 1\n","- Bullet point 2\n","\n","Only include an example if it's very helpful.\n","\n","Examples:\n","\n","Q: What is a thesis statement?\n","A: A thesis statement summarizes the main argument of your essay in one sentence.\n","- Guides the essay's structure and focus\n","- Should be clear, specific, and arguable\n","\n","Q: What is a hook in writing?\n","A: A hook is the opening sentence that grabs the reader‚Äôs attention.\n","- Can be a question, quote, or bold statement\n","- Makes the reader want to keep reading\n","\n","Q: {task}\n","A:\"\"\"\n",")\n","\n","# ‚úÖ Initialize LLM\n","llm = ChatGroq(\n","    model_name=\"meta-llama/llama-4-scout-17b-16e-instruct\",\n","    temperature=0.7,\n","    groq_api_key=groq_api_key\n",")\n","\n","# ‚úÖ Initialize memory\n","memory = ConversationBufferMemory(memory_key=\"chat_history\")\n","\n","# ‚úÖ Initialize agent\n","agent = initialize_agent(\n","    tools=tools,\n","    llm=llm,\n","    agent=AgentType.STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION,\n","    memory=memory,\n","    verbose=False,\n","    max_iterations=2,\n","    early_stopping_method=\"generate\",\n","    handle_parsing_errors=True\n",")\n","\n","# ‚úÖ Response function for Gradio\n","def writing_assistant(user_input):\n","    if not user_input.strip():\n","        return \"‚ùå Please enter a question.\"\n","\n","    # Tool 1: Knowledge Base\n","    kb_answer = writing_knowledge_base.invoke(user_input)\n","    if kb_answer and kb_answer.strip() != \"\":\n","        return f\"üõ†Ô∏è Used Knowledge Base:\\n\\n{kb_answer}\"\n","\n","    # Tool 2: Reading Time\n","    if any(word in user_input.lower() for word in [\"word\", \"read\", \"minute\", \"hour\", \"'\", \"\\\"\"]):\n","        nums = []\n","        for word in user_input.split():\n","            clean_word = word.strip('\"\\'').replace(',', '')\n","            if clean_word.isdigit():\n","                nums.append(int(clean_word))\n","        if nums:\n","            return f\"üõ†Ô∏è Used Reading Calculator:\\n\\n{estimate_reading_time.invoke(str(nums[0]))}\"\n","\n","    # Else use LLM\n","    try:\n","        response = agent.invoke({\n","            \"input\": writing_prompt.format(task=user_input)\n","        })\n","        return f\"ü§ñ Used LLM:\\n\\n{response['output']}\"\n","    except Exception as e:\n","        return f\"‚ùå Error: {str(e)}\"\n","\n","# ‚úÖ Gradio UI\n","gr.Interface(\n","    fn=writing_assistant,\n","    inputs=gr.Textbox(label=\"‚úçÔ∏è Enter your question\", placeholder=\"e.g., What is a thesis statement?\"),\n","    outputs=gr.Textbox(label=\"üß† Assistant Response\"),\n","    title=\"üìù AI Writing Assistant\",\n","    description=\"Ask about writing techniques, terms, or reading time. Powered by LangChain, Groq & LLaMA 4.\"\n",").launch()\n"],"metadata":{"id":"e0C2ywYcf6-I"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","# ‡¶è‡¶ñ‡¶® Drive-‡¶è‡¶∞ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®\n","!ls \"/content/drive/MyDrive/ColabNotebooks\""],"metadata":{"id":"QjIGYQGRnTBB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import files\n","uploaded = files.upload()  # ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßÅ‡ßü‡¶æ‡¶≤‡¶ø ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"-PX9CQ3Wpmgk","executionInfo":{"status":"ok","timestamp":1744958833992,"user_tz":-360,"elapsed":15495,"user":{"displayName":"Rupak Mallick","userId":"10751086656961966819"}},"outputId":"170fea06-074f-462e-e33f-bb9c8955597d"},"execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-3e32c6bf-040f-4fff-b650-9cea96ad55b8\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-3e32c6bf-040f-4fff-b650-9cea96ad55b8\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving writing_assistant_with_ui_py.py to writing_assistant_with_ui_py.py\n"]}]},{"cell_type":"code","source":["# Git ‡¶á‡¶®‡ßç‡¶∏‡¶ü‡¶≤ ‡¶ì ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®\n","!apt-get install git -qq\n","!git config --global user.email \"rupak.stat16@gmail.com\"\n","!git config --global user.name \"Rupak-Mallick\""],"metadata":{"id":"82U8cvEdsd0J","executionInfo":{"status":"ok","timestamp":1744959970577,"user_tz":-360,"elapsed":4533,"user":{"displayName":"Rupak Mallick","userId":"10751086656961966819"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["# ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶™‡ßã‡¶ú‡¶ø‡¶ü‡¶∞‡¶ø URL ‡¶¶‡¶ø‡ßü‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®\n","!git clone https://git@github.com/Rupak-Mallick/ai-writing-assistant.git\n","%cd /content/ai-writing-assistant"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZvgpHkxesmKg","executionInfo":{"status":"ok","timestamp":1744961126699,"user_tz":-360,"elapsed":534,"user":{"displayName":"Rupak Mallick","userId":"10751086656961966819"}},"outputId":"123249ac-fc83-4482-fadd-b061b82beeb7"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["Cloning into 'ai-writing-assistant'...\n","warning: You appear to have cloned an empty repository.\n","/content/ai-writing-assistant\n"]}]},{"cell_type":"code","source":["# ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶• ‡¶¶‡¶ø‡ßü‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®\n","# ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶• ‡¶¶‡¶ø‡ßü‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®\n","!cp /content/Writing-Assistant-with-UI.py /content/ai-writing-assistant/"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i-lj-xgKtRij","executionInfo":{"status":"ok","timestamp":1744963890009,"user_tz":-360,"elapsed":101,"user":{"displayName":"Rupak Mallick","userId":"10751086656961966819"}},"outputId":"6c3be516-f5c1-476a-e721-3932fa25e788"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["cp: cannot stat '/content/Writing-Assistant-with-UI.py': No such file or directory\n"]}]},{"cell_type":"code","source":["# ‡¶∏‡¶¨ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®, ‡¶ï‡¶Æ‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶™‡ßÅ‡¶∂ ‡¶ï‡¶∞‡ßÅ‡¶®\n","!git add .\n","!git commit -m \"Added Python file from Colab\"\n","!git push"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"h5xsM75jtqG3","executionInfo":{"status":"ok","timestamp":1744961143000,"user_tz":-360,"elapsed":349,"user":{"displayName":"Rupak Mallick","userId":"10751086656961966819"}},"outputId":"500f3163-e5ae-4274-eaa5-5f370cf258e2"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["On branch main\n","\n","Initial commit\n","\n","nothing to commit (create/copy files and use \"git add\" to track)\n","error: src refspec refs/heads/main does not match any\n","\u001b[31merror: failed to push some refs to 'https://github.com/Rupak-Mallick/ai-writing-assistant.git'\n","\u001b[m"]}]},{"cell_type":"code","source":["from getpass import getpass\n","token = getpass('Enter your GitHub token: ')\n","!git remote set-url origin https://{token}@github.com/Rupak-Mallick/ai-writing-assistant.git\n","!git push"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AJVHAnnRtvWH","executionInfo":{"status":"ok","timestamp":1744961162316,"user_tz":-360,"elapsed":7432,"user":{"displayName":"Rupak Mallick","userId":"10751086656961966819"}},"outputId":"de8b5831-c121-4e74-f96a-7d644f3585ae"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter your GitHub token: ¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑\n","error: src refspec refs/heads/main does not match any\n","\u001b[31merror: failed to push some refs to 'https://github.com/Rupak-Mallick/ai-writing-assistant.git'\n","\u001b[m"]}]},{"cell_type":"code","source":["# requirements.txt ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®\n","!pip freeze > requirements.txt\n","\n","# runtime.txt ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶ê‡¶ö‡ßç‡¶õ‡¶ø‡¶ï)\n","with open('runtime.txt', 'w') as f:\n","    f.write('python-3.9.13')"],"metadata":{"id":"d1PEta_8t3R_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!git add .\n","!git commit -m \"Added necessary files for Render deployment\"\n","!git push"],"metadata":{"id":"NBe2ZlSqt-45"},"execution_count":null,"outputs":[]}]}